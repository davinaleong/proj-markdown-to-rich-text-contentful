generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model activities {
  id         BigInt    @id @default(autoincrement())
  user_id    BigInt?
  message    String?
  label      String?   @db.VarChar(255)
  link       String?
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  users      users?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "activities_user_id_foreign")
}

model apps {
  id               BigInt    @id @default(autoincrement())
  user_id          BigInt
  slug             String?   @db.VarChar(255)
  name             String?   @db.VarChar(255)
  title            String?   @db.VarChar(255)
  description      String?
  meta_title       String?   @db.VarChar(255)
  meta_author      String?   @default("Davina Leong") @db.VarChar(255)
  meta_description String?
  meta_keywords    String?
  released_at      DateTime? @db.Date
  status           Boolean   @default(false)
  created_at       DateTime? @db.Timestamp(0)
  updated_at       DateTime? @db.Timestamp(0)
  deleted_at       DateTime? @db.Timestamp(0)
  sort_order       Int?      @default(0)
  email            String?
  users            users     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "apps_user_id_foreign")
}

model blacklists {
  id         BigInt    @id @default(autoincrement())
  user_id    BigInt?
  name       String?   @db.VarChar(255)
  email      String?   @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  deleted_at DateTime? @db.Timestamp(0)
  users      users?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "blacklists_user_id_foreign")
}

model books {
  id             BigInt       @id @default(autoincrement())
  user_id        BigInt
  translation_id BigInt
  slug           String?      @db.VarChar(255)
  book_no        String?      @db.VarChar(255)
  name           String?      @db.VarChar(255)
  title          String?      @db.VarChar(255)
  abbr           String?      @db.VarChar(255)
  status         Boolean      @default(false)
  created_at     DateTime?    @db.Timestamp(0)
  updated_at     DateTime?    @db.Timestamp(0)
  deleted_at     DateTime?    @db.Timestamp(0)
  sort_order     Int?         @default(0)
  translations   translations @relation(fields: [translation_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "books_translation_id_foreign")
  users          users        @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "books_user_id_foreign")
  chapters       chapters[]
}

model chapters {
  id         BigInt    @id @default(autoincrement())
  user_id    BigInt
  book_id    BigInt
  slug       String?   @db.VarChar(255)
  chapter_no String?   @db.VarChar(255)
  name       String?   @db.VarChar(255)
  title      String?   @db.VarChar(255)
  text       String?
  status     Boolean   @default(false)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  deleted_at DateTime? @db.Timestamp(0)
  sort_order Int?      @default(0)
  books      books     @relation(fields: [book_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "chapters_book_id_foreign")
  users      users     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "chapters_user_id_foreign")
}

model failedJobs {
  id         BigInt   @id @default(autoincrement())
  uuid       String   @unique(map: "failed_jobs_uuid_unique") @db.VarChar(255)
  connection String
  queue      String
  payload    String
  exception  String
  failed_at  DateTime @default(now()) @db.Timestamp(0)

  @@map("failed_jobs")
}

model folders {
  id         BigInt    @id @default(autoincrement())
  name       String?   @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model jobs {
  id           BigInt @id @default(autoincrement())
  queue        String @db.VarChar(255)
  payload      String
  attempts     Int    @db.SmallInt
  reserved_at  Int?
  available_at Int
  created_at   Int

  @@index([queue], map: "jobs_queue_index")
}

model jokes {
  id               BigInt    @id @default(autoincrement())
  user_id          BigInt
  slug             String?   @db.VarChar(255)
  name             String?   @db.VarChar(255)
  title            String?   @db.VarChar(255)
  text             String?
  meta_title       String?   @db.VarChar(255)
  meta_author      String?   @default("Davina Leong") @db.VarChar(255)
  meta_description String?
  meta_keywords    String?
  status           Boolean   @default(false)
  sort_order       Int       @default(0)
  created_at       DateTime? @db.Timestamp(0)
  updated_at       DateTime? @db.Timestamp(0)
  deleted_at       DateTime? @db.Timestamp(0)
  first_character  String?   @db.VarChar(1)
  users            users     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "jokes_user_id_foreign")
}

model messageTypes {
  id         BigInt     @id @default(autoincrement())
  user_id    BigInt
  name       String?    @db.VarChar(255)
  title      String?    @db.VarChar(255)
  value      String?    @db.VarChar(255)
  status     Boolean?   @default(false)
  sort_order Int?       @default(0)
  created_at DateTime?  @db.Timestamp(0)
  updated_at DateTime?  @db.Timestamp(0)
  deleted_at DateTime?  @db.Timestamp(0)
  app_id     BigInt?
  users      users      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "message_types_user_id_foreign")
  messages   messages[]

  @@map("message_types")
}

model messages {
  id              BigInt        @id @default(autoincrement())
  message_type_id BigInt?
  name            String?       @db.VarChar(255)
  email           String?       @db.VarChar(255)
  message         String?
  created_at      DateTime?     @db.Timestamp(0)
  updated_at      DateTime?     @db.Timestamp(0)
  deleted_at      DateTime?     @db.Timestamp(0)
  app_id          BigInt?
  phone_number    String?       @db.VarChar(255)
  message_types   messageTypes? @relation(fields: [message_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "messages_message_type_id_foreign")
}

model migrations {
  id        Int    @id @default(autoincrement())
  migration String @db.VarChar(255)
  batch     Int
}

model pages {
  id               BigInt    @id @default(autoincrement())
  user_id          BigInt
  name             String?   @db.VarChar(255)
  title            String?   @db.VarChar(255)
  subtitle         String?
  meta_title       String?   @db.VarChar(255)
  meta_description String?
  created_at       DateTime? @db.Timestamp(0)
  updated_at       DateTime? @db.Timestamp(0)
  deleted_at       DateTime? @db.Timestamp(0)
  text             String?
  status           Boolean   @default(false)
  sort_order       Int       @default(0)
  users            users     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "pages_user_id_foreign")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model password_resets {
  email      String    @db.VarChar(255)
  token      String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)

  @@index([email], map: "password_resets_email_index")
  @@ignore
}

model personalAccessTokens {
  id             BigInt    @id @default(autoincrement())
  tokenable_type String    @db.VarChar(255)
  tokenable_id   BigInt
  name           String    @db.VarChar(255)
  token          String    @unique(map: "personal_access_tokens_token_unique") @db.VarChar(64)
  abilities      String?
  last_used_at   DateTime? @db.Timestamp(0)
  created_at     DateTime? @db.Timestamp(0)
  updated_at     DateTime? @db.Timestamp(0)

  @@index([tokenable_type, tokenable_id], map: "personal_access_tokens_tokenable_type_tokenable_id_index")
  @@map("personal_access_tokens")
}

model posts {
  id               BigInt    @id @default(autoincrement())
  user_id          BigInt
  name             String?   @db.VarChar(255)
  title            String?   @db.VarChar(255)
  slug             String?
  subtitle         String?
  summary          String?
  text             String?
  meta_title       String?   @db.VarChar(255)
  meta_description String?
  featured         Boolean
  published_at     DateTime? @db.Date
  created_at       DateTime? @db.Timestamp(0)
  updated_at       DateTime? @db.Timestamp(0)
  deleted_at       DateTime? @db.Timestamp(0)
  year             String?   @db.VarChar(4)
  status           Boolean   @default(false)
  sort_order       Int       @default(0)
  users            users     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "posts_user_id_foreign")
}

model settings {
  id         BigInt    @id @default(autoincrement())
  user_id    BigInt
  name       String?   @db.VarChar(255)
  key        String?   @db.VarChar(255)
  value      String?   @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  users      users     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "settings_user_id_foreign")
}

model subscribers {
  id         BigInt    @id @default(autoincrement())
  user_id    BigInt?
  email      String?   @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  deleted_at DateTime? @db.Timestamp(0)
  users      users?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "subscribers_user_id_foreign")
}

model translations {
  id         BigInt    @id @default(autoincrement())
  user_id    BigInt
  slug       String?   @db.VarChar(255)
  name       String?   @db.VarChar(255)
  title      String?   @db.VarChar(255)
  abbr       String?   @db.VarChar(255)
  status     Boolean   @default(false)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  deleted_at DateTime? @db.Timestamp(0)
  copyright  String?
  sort_order Int?      @default(0)
  books      books[]
  users      users     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "translations_user_id_foreign")
}

model users {
  id                BigInt         @id @default(autoincrement())
  name              String         @db.VarChar(255)
  email             String         @unique(map: "users_email_unique") @db.VarChar(255)
  email_verified_at DateTime?      @db.Timestamp(0)
  password          String         @db.VarChar(255)
  remember_token    String?        @db.VarChar(100)
  created_at        DateTime?      @db.Timestamp(0)
  updated_at        DateTime?      @db.Timestamp(0)
  activities        activities[]
  apps              apps[]
  blacklists        blacklists[]
  books             books[]
  chapters          chapters[]
  jokes             jokes[]
  message_types     messageTypes[]
  pages             pages[]
  posts             posts[]
  settings          settings[]
  subscribers       subscribers[]
  translations      translations[]
}
